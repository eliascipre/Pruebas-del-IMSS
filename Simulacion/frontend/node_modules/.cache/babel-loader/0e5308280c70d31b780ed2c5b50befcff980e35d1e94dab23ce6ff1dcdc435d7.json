{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatAttributes = formatAttributes;\nexports.escapeSpecialCharacters = escapeSpecialCharacters;\nexports.revertEscapedCharacters = revertEscapedCharacters;\nexports.formatDOM = formatDOM;\nvar domhandler_1 = require(\"domhandler\");\nvar constants_1 = require(\"./constants\");\n/**\n * Gets case-sensitive tag name.\n *\n * @param tagName - Tag name in lowercase.\n * @returns - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return constants_1.CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\n}\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param attributes - List of attributes.\n * @returns - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var map = {};\n  var index = 0;\n  var attributesLength = attributes.length;\n  // `NamedNodeMap` is array-like\n  for (; index < attributesLength; index++) {\n    var attribute = attributes[index];\n    map[attribute.name] = attribute.value;\n  }\n  return map;\n}\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param tagName - Lowercase tag name.\n * @returns - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n/**\n * Escapes special characters before parsing.\n *\n * @param html - The HTML string.\n * @returns - HTML string with escaped special characters.\n */\nfunction escapeSpecialCharacters(html) {\n  return html.replace(constants_1.CARRIAGE_RETURN_REGEX, constants_1.CARRIAGE_RETURN_PLACEHOLDER);\n}\n/**\n * Reverts escaped special characters back to actual characters.\n *\n * @param text - The text with escaped characters.\n * @returns - Text with escaped characters reverted.\n */\nfunction revertEscapedCharacters(text) {\n  return text.replace(constants_1.CARRIAGE_RETURN_PLACEHOLDER_REGEX, constants_1.CARRIAGE_RETURN);\n}\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param nodes - DOM nodes.\n * @param parent - Parent node.\n * @param directive - Directive.\n * @returns - Nodes.\n */\nfunction formatDOM(nodes, parent, directive) {\n  if (parent === void 0) {\n    parent = null;\n  }\n  var domNodes = [];\n  var current;\n  var index = 0;\n  var nodesLength = nodes.length;\n  for (; index < nodesLength; index++) {\n    var node = nodes[index];\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1:\n        {\n          var tagName = formatTagName(node.nodeName);\n          // script, style, or tag\n          current = new domhandler_1.Element(tagName, formatAttributes(node.attributes));\n          current.children = formatDOM(\n          // template children are on content\n          tagName === 'template' ? node.content.childNodes : node.childNodes, current);\n          break;\n        }\n      case 3:\n        current = new domhandler_1.Text(revertEscapedCharacters(node.nodeValue));\n        break;\n      case 8:\n        current = new domhandler_1.Comment(node.nodeValue);\n        break;\n      default:\n        continue;\n    }\n    // set previous node next\n    var prev = domNodes[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n    // set properties for current node\n    current.parent = parent;\n    current.prev = prev;\n    current.next = null;\n    domNodes.push(current);\n  }\n  if (directive) {\n    current = new domhandler_1.ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n    current.next = domNodes[0] || null;\n    current.parent = parent;\n    domNodes.unshift(current);\n    if (domNodes[1]) {\n      domNodes[1].prev = domNodes[0];\n    }\n  }\n  return domNodes;\n}","map":{"version":3,"names":["exports","formatAttributes","escapeSpecialCharacters","revertEscapedCharacters","formatDOM","domhandler_1","require","constants_1","getCaseSensitiveTagName","tagName","CASE_SENSITIVE_TAG_NAMES_MAP","attributes","map","index","attributesLength","length","attribute","name","value","formatTagName","toLowerCase","caseSensitiveTagName","html","replace","CARRIAGE_RETURN_REGEX","CARRIAGE_RETURN_PLACEHOLDER","text","CARRIAGE_RETURN_PLACEHOLDER_REGEX","CARRIAGE_RETURN","nodes","parent","directive","domNodes","current","nodesLength","node","nodeType","nodeName","Element","children","content","childNodes","Text","nodeValue","Comment","prev","next","push","ProcessingInstruction","substring","indexOf","unshift"],"sources":["/Users/elias/Documents/Trabajo/Pruebas-del-IMSS/Simulacion/frontend/node_modules/html-dom-parser/src/client/utilities.ts"],"sourcesContent":["import { Comment, Element, ProcessingInstruction, Text } from 'domhandler';\n\nimport type { DOMNode } from '../types';\nimport {\n  CARRIAGE_RETURN,\n  CARRIAGE_RETURN_PLACEHOLDER,\n  CARRIAGE_RETURN_PLACEHOLDER_REGEX,\n  CARRIAGE_RETURN_REGEX,\n  CASE_SENSITIVE_TAG_NAMES_MAP,\n} from './constants';\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param tagName - Tag name in lowercase.\n * @returns - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName: string): string | undefined {\n  return CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param attributes - List of attributes.\n * @returns - Map of attribute name to value.\n */\nexport function formatAttributes(attributes: NamedNodeMap) {\n  const map: Record<string, string> = {};\n  let index = 0;\n  const attributesLength = attributes.length;\n\n  // `NamedNodeMap` is array-like\n  for (; index < attributesLength; index++) {\n    const attribute = attributes[index];\n    map[attribute.name] = attribute.value;\n  }\n\n  return map;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param tagName - Lowercase tag name.\n * @returns - Formatted tag name.\n */\nfunction formatTagName(tagName: string): string {\n  tagName = tagName.toLowerCase();\n  const caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n\n  return tagName;\n}\n\n/**\n * Escapes special characters before parsing.\n *\n * @param html - The HTML string.\n * @returns - HTML string with escaped special characters.\n */\nexport function escapeSpecialCharacters(html: string): string {\n  return html.replace(CARRIAGE_RETURN_REGEX, CARRIAGE_RETURN_PLACEHOLDER);\n}\n\n/**\n * Reverts escaped special characters back to actual characters.\n *\n * @param text - The text with escaped characters.\n * @returns - Text with escaped characters reverted.\n */\nexport function revertEscapedCharacters(text: string): string {\n  return text.replace(CARRIAGE_RETURN_PLACEHOLDER_REGEX, CARRIAGE_RETURN);\n}\n\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param nodes - DOM nodes.\n * @param parent - Parent node.\n * @param directive - Directive.\n * @returns - Nodes.\n */\nexport function formatDOM(\n  nodes: NodeList,\n  parent: DOMNode | null = null,\n  directive?: string,\n): DOMNode[] {\n  const domNodes = [];\n  let current;\n  let index = 0;\n  const nodesLength = nodes.length;\n\n  for (; index < nodesLength; index++) {\n    const node = nodes[index];\n\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1: {\n        const tagName = formatTagName(node.nodeName);\n\n        // script, style, or tag\n        current = new Element(\n          tagName,\n          formatAttributes((node as HTMLElement).attributes),\n        );\n\n        current.children = formatDOM(\n          // template children are on content\n          tagName === 'template'\n            ? (node as HTMLTemplateElement).content.childNodes\n            : node.childNodes,\n          current,\n        );\n\n        break;\n      }\n\n      case 3:\n        current = new Text(revertEscapedCharacters(node.nodeValue!));\n        break;\n\n      case 8:\n        current = new Comment(node.nodeValue!);\n        break;\n\n      default:\n        continue;\n    }\n\n    // set previous node next\n    const prev = domNodes[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n\n    // set properties for current node\n    current.parent = parent as Element;\n    current.prev = prev;\n    current.next = null;\n\n    domNodes.push(current);\n  }\n\n  if (directive) {\n    current = new ProcessingInstruction(\n      directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      directive,\n    );\n\n    current.next = domNodes[0] || null;\n    current.parent = parent as Element;\n    domNodes.unshift(current);\n\n    if (domNodes[1]) {\n      domNodes[1].prev = domNodes[0];\n    }\n  }\n\n  return domNodes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}