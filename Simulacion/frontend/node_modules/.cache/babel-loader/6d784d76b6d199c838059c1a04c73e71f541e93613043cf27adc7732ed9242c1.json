{"ast":null,"code":"export function reversePatch(structuredPatch) {\n  if (Array.isArray(structuredPatch)) {\n    // (See comment in unixToWin for why we need the pointless-looking anonymous function here)\n    return structuredPatch.map(patch => reversePatch(patch)).reverse();\n  }\n  return Object.assign(Object.assign({}, structuredPatch), {\n    oldFileName: structuredPatch.newFileName,\n    oldHeader: structuredPatch.newHeader,\n    newFileName: structuredPatch.oldFileName,\n    newHeader: structuredPatch.oldHeader,\n    hunks: structuredPatch.hunks.map(hunk => {\n      return {\n        oldLines: hunk.newLines,\n        oldStart: hunk.newStart,\n        newLines: hunk.oldLines,\n        newStart: hunk.oldStart,\n        lines: hunk.lines.map(l => {\n          if (l.startsWith('-')) {\n            return \"+\".concat(l.slice(1));\n          }\n          if (l.startsWith('+')) {\n            return \"-\".concat(l.slice(1));\n          }\n          return l;\n        })\n      };\n    })\n  });\n}","map":{"version":3,"names":["reversePatch","structuredPatch","Array","isArray","map","patch","reverse","Object","assign","oldFileName","newFileName","oldHeader","newHeader","hunks","hunk","oldLines","newLines","oldStart","newStart","lines","l","startsWith","concat","slice"],"sources":["/home/elias/Documentos/Simulacion/frontend/node_modules/diff/libesm/patch/reverse.js"],"sourcesContent":["export function reversePatch(structuredPatch) {\n    if (Array.isArray(structuredPatch)) {\n        // (See comment in unixToWin for why we need the pointless-looking anonymous function here)\n        return structuredPatch.map(patch => reversePatch(patch)).reverse();\n    }\n    return Object.assign(Object.assign({}, structuredPatch), { oldFileName: structuredPatch.newFileName, oldHeader: structuredPatch.newHeader, newFileName: structuredPatch.oldFileName, newHeader: structuredPatch.oldHeader, hunks: structuredPatch.hunks.map(hunk => {\n            return {\n                oldLines: hunk.newLines,\n                oldStart: hunk.newStart,\n                newLines: hunk.oldLines,\n                newStart: hunk.oldStart,\n                lines: hunk.lines.map(l => {\n                    if (l.startsWith('-')) {\n                        return `+${l.slice(1)}`;\n                    }\n                    if (l.startsWith('+')) {\n                        return `-${l.slice(1)}`;\n                    }\n                    return l;\n                })\n            };\n        }) });\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,eAAe,EAAE;EAC1C,IAAIC,KAAK,CAACC,OAAO,CAACF,eAAe,CAAC,EAAE;IAChC;IACA,OAAOA,eAAe,CAACG,GAAG,CAACC,KAAK,IAAIL,YAAY,CAACK,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EACtE;EACA,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,eAAe,CAAC,EAAE;IAAEQ,WAAW,EAAER,eAAe,CAACS,WAAW;IAAEC,SAAS,EAAEV,eAAe,CAACW,SAAS;IAAEF,WAAW,EAAET,eAAe,CAACQ,WAAW;IAAEG,SAAS,EAAEX,eAAe,CAACU,SAAS;IAAEE,KAAK,EAAEZ,eAAe,CAACY,KAAK,CAACT,GAAG,CAACU,IAAI,IAAI;MAC5P,OAAO;QACHC,QAAQ,EAAED,IAAI,CAACE,QAAQ;QACvBC,QAAQ,EAAEH,IAAI,CAACI,QAAQ;QACvBF,QAAQ,EAAEF,IAAI,CAACC,QAAQ;QACvBG,QAAQ,EAAEJ,IAAI,CAACG,QAAQ;QACvBE,KAAK,EAAEL,IAAI,CAACK,KAAK,CAACf,GAAG,CAACgB,CAAC,IAAI;UACvB,IAAIA,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;YACnB,WAAAC,MAAA,CAAWF,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;UACzB;UACA,IAAIH,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;YACnB,WAAAC,MAAA,CAAWF,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;UACzB;UACA,OAAOH,CAAC;QACZ,CAAC;MACL,CAAC;IACL,CAAC;EAAE,CAAC,CAAC;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}